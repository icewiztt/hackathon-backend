// Code generated by sqlc. DO NOT EDIT.
// source: submission.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createSubmission = `-- name: CreateSubmission :one
INSERT INTO submissions (
    from_user_id,
    to_task_id,
    task_subtasks, 
    submission_answers
) VALUES (
    $1 , $2 , $3 , $4
) RETURNING id, from_user_id, to_task_id, task_subtasks, submission_answers, created_at
`

type CreateSubmissionParams struct {
	FromUserID        int32    `json:"from_user_id"`
	ToTaskID          int32    `json:"to_task_id"`
	TaskSubtasks      int32    `json:"task_subtasks"`
	SubmissionAnswers []string `json:"submission_answers"`
}

func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) (Submission, error) {
	row := q.db.QueryRowContext(ctx, createSubmission,
		arg.FromUserID,
		arg.ToTaskID,
		arg.TaskSubtasks,
		pq.Array(arg.SubmissionAnswers),
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.FromUserID,
		&i.ToTaskID,
		&i.TaskSubtasks,
		pq.Array(&i.SubmissionAnswers),
		&i.CreatedAt,
	)
	return i, err
}

const listAllSubmissions = `-- name: ListAllSubmissions :many
SELECT id, from_user_id, to_task_id, task_subtasks, submission_answers, created_at FROM submissions
ORDER BY id
`

func (q *Queries) ListAllSubmissions(ctx context.Context) ([]Submission, error) {
	rows, err := q.db.QueryContext(ctx, listAllSubmissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Submission
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.FromUserID,
			&i.ToTaskID,
			&i.TaskSubtasks,
			pq.Array(&i.SubmissionAnswers),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubmissions = `-- name: ListSubmissions :many
SELECT id, from_user_id, to_task_id, task_subtasks, submission_answers, created_at FROM submissions
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSubmissionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSubmissions(ctx context.Context, arg ListSubmissionsParams) ([]Submission, error) {
	rows, err := q.db.QueryContext(ctx, listSubmissions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Submission
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.FromUserID,
			&i.ToTaskID,
			&i.TaskSubtasks,
			pq.Array(&i.SubmissionAnswers),
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
