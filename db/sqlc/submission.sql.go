// Code generated by sqlc. DO NOT EDIT.
// source: submission.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createSubmission = `-- name: CreateSubmission :one
INSERT INTO submissions (
    username,
    fullname,
    taskid,
    taskname,
    task_subtasks, 
    submission_answers,
    submission_score,
    submission_results
) VALUES (
    $1 , $2 , $3 , $4 , $5 , $6 , $7 , $8
) RETURNING id, username, fullname, taskid, taskname, task_subtasks, submission_answers, submission_results, submission_score, created_at
`

type CreateSubmissionParams struct {
	Username          string   `json:"username"`
	Fullname          string   `json:"fullname"`
	Taskid            int32    `json:"taskid"`
	Taskname          string   `json:"taskname"`
	TaskSubtasks      int32    `json:"task_subtasks"`
	SubmissionAnswers []string `json:"submission_answers"`
	SubmissionScore   float64  `json:"submission_score"`
	SubmissionResults []bool   `json:"submission_results"`
}

func (q *Queries) CreateSubmission(ctx context.Context, arg CreateSubmissionParams) (Submission, error) {
	row := q.db.QueryRowContext(ctx, createSubmission,
		arg.Username,
		arg.Fullname,
		arg.Taskid,
		arg.Taskname,
		arg.TaskSubtasks,
		pq.Array(arg.SubmissionAnswers),
		arg.SubmissionScore,
		pq.Array(arg.SubmissionResults),
	)
	var i Submission
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Fullname,
		&i.Taskid,
		&i.Taskname,
		&i.TaskSubtasks,
		pq.Array(&i.SubmissionAnswers),
		pq.Array(&i.SubmissionResults),
		&i.SubmissionScore,
		&i.CreatedAt,
	)
	return i, err
}

const listAllSubmissions = `-- name: ListAllSubmissions :many
SELECT id, username, fullname, taskid, taskname, task_subtasks, submission_answers, submission_results, submission_score, created_at FROM submissions
ORDER BY id
`

func (q *Queries) ListAllSubmissions(ctx context.Context) ([]Submission, error) {
	rows, err := q.db.QueryContext(ctx, listAllSubmissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Submission{}
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Fullname,
			&i.Taskid,
			&i.Taskname,
			&i.TaskSubtasks,
			pq.Array(&i.SubmissionAnswers),
			pq.Array(&i.SubmissionResults),
			&i.SubmissionScore,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listScores = `-- name: ListScores :many
SELECT MAX(submission_score) as score , fullname as user , taskname as task
FROM submissions
GROUP BY (fullname,taskname)
ORDER BY (fullname,taskname)
`

type ListScoresRow struct {
	Score interface{} `json:"score"`
	User  string      `json:"user"`
	Task  string      `json:"task"`
}

func (q *Queries) ListScores(ctx context.Context) ([]ListScoresRow, error) {
	rows, err := q.db.QueryContext(ctx, listScores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListScoresRow{}
	for rows.Next() {
		var i ListScoresRow
		if err := rows.Scan(&i.Score, &i.User, &i.Task); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSubmissions = `-- name: ListSubmissions :many
SELECT id, username, fullname, taskid, taskname, task_subtasks, submission_answers, submission_results, submission_score, created_at FROM submissions
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListSubmissionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSubmissions(ctx context.Context, arg ListSubmissionsParams) ([]Submission, error) {
	rows, err := q.db.QueryContext(ctx, listSubmissions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Submission{}
	for rows.Next() {
		var i Submission
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Fullname,
			&i.Taskid,
			&i.Taskname,
			&i.TaskSubtasks,
			pq.Array(&i.SubmissionAnswers),
			pq.Array(&i.SubmissionResults),
			&i.SubmissionScore,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
