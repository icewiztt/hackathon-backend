// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    fullname,
    password_encoded,
    usertype
) VALUES (
    $1 , $2 , $3 , $4
) RETURNING id, username, fullname, password_encoded, usertype, created_at
`

type CreateUserParams struct {
	Username        string `json:"username"`
	Fullname        string `json:"fullname"`
	PasswordEncoded string `json:"password_encoded"`
	Usertype        int32  `json:"usertype"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Fullname,
		arg.PasswordEncoded,
		arg.Usertype,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Fullname,
		&i.PasswordEncoded,
		&i.Usertype,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, fullname, password_encoded, usertype, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Fullname,
		&i.PasswordEncoded,
		&i.Usertype,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, fullname, password_encoded, usertype, created_at FROM users 
ORDER BY username 
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Fullname,
			&i.PasswordEncoded,
			&i.Usertype,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserFullname = `-- name: UpdateUserFullname :one
UPDATE users
SET fullname = $2
WHERE id = $1
RETURNING id, username, fullname, password_encoded, usertype, created_at
`

type UpdateUserFullnameParams struct {
	ID       int32  `json:"id"`
	Fullname string `json:"fullname"`
}

func (q *Queries) UpdateUserFullname(ctx context.Context, arg UpdateUserFullnameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserFullname, arg.ID, arg.Fullname)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Fullname,
		&i.PasswordEncoded,
		&i.Usertype,
		&i.CreatedAt,
	)
	return i, err
}
